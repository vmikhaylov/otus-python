diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed5487..9fdadd1 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -159,6 +159,7 @@ extern "C" {
 #define SET_ADD         146
 #define MAP_ADD         147
 
+#define LOAD_OTUS 148
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365..b927734 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -189,4 +189,6 @@ EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
 
+def_op('LOAD_OTUS', 148)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index 4e4adc2..457ddf1 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -2540,6 +2540,23 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             break;
         }
 
+ 
+        TARGET(LOAD_OTUS) {
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+            } else {
+                format_exc_check_arg(PyExc_UnboundLocalError,
+                    UNBOUNDLOCAL_ERROR_MSG,
+                    PyTuple_GetItem(co->co_varnames, 0));
+                break;
+            }
+            x = GETITEM(consts, oparg);
+            Py_INCREF(x);
+            PUSH(x);
+            FAST_DISPATCH();
+        }
         TARGET(LOAD_ATTR)
         {
             w = GETITEM(names, oparg);
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127..8c29b98 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f88..573f612 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -593,7 +593,19 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                          ISBASICBLOCK(blocks,i,4))
                     memset(codestr+i+1, NOP, 3);
                 break;
-        }
+             case LOAD_FAST:
+                 if (i+3 >= codelen)
+                     continue;
+                 if (codestr[i+1] == 0 &&
+                     codestr[i+2] == 0 &&
+                     codestr[i+3] == LOAD_CONST) {
+                     codestr[i] = LOAD_OTUS;
+                     codestr[i+1] = codestr[i+4];
+                     codestr[i+2] = codestr[i+5];
+                     memset(codestr+i+3, NOP, 3); 
+                 }
+                 break; 
+        } 
     }
 
     /* Fixup linenotab */
